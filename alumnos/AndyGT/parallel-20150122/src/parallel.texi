\input texinfo
@setfilename parallel.info

@documentencoding utf-8

@settitle parallel - build and execute shell command lines from standard input in parallel

@node Top
@top parallel

@menu
* NAME::
* SYNOPSIS::
* DESCRIPTION::
* OPTIONS::
* EXAMPLE@asis{:} Working as xargs -n1. Argument appending::
* EXAMPLE@asis{:} Reading arguments from command line::
* EXAMPLE@asis{:} Inserting multiple arguments::
* EXAMPLE@asis{:} Context replace::
* EXAMPLE@asis{:} Compute intensive jobs and substitution::
* EXAMPLE@asis{:} Substitution and redirection::
* EXAMPLE@asis{:} Composed commands::
* EXAMPLE@asis{:} Calling Bash functions::
* EXAMPLE@asis{:} Function tester::
* EXAMPLE@asis{:} Removing file extension when processing files::
* EXAMPLE@asis{:} Removing two file extensions when processing files::
* EXAMPLE@asis{:} Download 10 images for each of the past 30 days::
* EXAMPLE@asis{:} Copy files as last modified date (ISO8601) with added random digits::
* EXAMPLE@asis{:} Digtal clock with "blinking" @asis{:}::
* EXAMPLE@asis{:} Aggregating content of files::
* EXAMPLE@asis{:} Breadth first parallel web crawler/mirrorer::
* EXAMPLE@asis{:} Process files from a tar file while unpacking::
* EXAMPLE@asis{:} Rewriting a for-loop and a while-read-loop::
* EXAMPLE@asis{:} Rewriting nested for-loops::
* EXAMPLE@asis{:} Finding the lowest difference between files::
* EXAMPLE@asis{:} for-loops with column names::
* EXAMPLE@asis{:} Count the differences between all files in a dir::
* EXAMPLE@asis{:} Speeding up fast jobs::
* EXAMPLE@asis{:} Using shell variables::
* EXAMPLE@asis{:} Group output lines::
* EXAMPLE@asis{:} Tag output lines::
* EXAMPLE@asis{:} Keep order of output same as order of input::
* EXAMPLE@asis{:} Parallel grep::
* EXAMPLE@asis{:} Grepping n lines for m regular expressions.::
* EXAMPLE@asis{:} Using remote computers::
* EXAMPLE@asis{:} Transferring of files::
* EXAMPLE@asis{:} Distributing work to local and remote computers::
* EXAMPLE@asis{:} Running the same command on remote computers::
* EXAMPLE@asis{:} Parallelizing rsync::
* EXAMPLE@asis{:} Use multiple inputs in one command::
* EXAMPLE@asis{:} Use a table as input::
* EXAMPLE@asis{:} Run the same command 10 times::
* EXAMPLE@asis{:} Working as cat | sh. Resource inexpensive jobs and evaluation::
* EXAMPLE@asis{:} Processing a big file using more cores::
* EXAMPLE@asis{:} Running more than 250 jobs workaround::
* EXAMPLE@asis{:} Working as mutex and counting semaphore::
* EXAMPLE@asis{:} Mutex for a script::
* EXAMPLE@asis{:} Start editor with filenames from stdin (standard input)::
* EXAMPLE@asis{:} Running sudo::
* EXAMPLE@asis{:} GNU Parallel as queue system/batch manager::
* EXAMPLE@asis{:} GNU Parallel as dir processor::
* QUOTING::
* LIST RUNNING JOBS::
* COMPLETE RUNNING JOBS BUT DO NOT START NEW JOBS::
* ENVIRONMENT VARIABLES::
* DEFAULT PROFILE (CONFIG FILE)::
* PROFILE FILES::
* EXIT STATUS::
* DIFFERENCES BETWEEN GNU Parallel AND ALTERNATIVES::
* BUGS::
* REPORTING BUGS::
* AUTHOR::
* LICENSE::
* DEPENDENCIES::
* SEE ALSO::
@end menu

@node NAME
@chapter NAME

parallel - build and execute shell command lines from standard input in parallel

@node SYNOPSIS
@chapter SYNOPSIS

@strong{parallel} [options] [@emph{command} [arguments]] < list_of_arguments

@strong{parallel} [options] [@emph{command} [arguments]] ( @strong{:::} arguments |
@strong{::::} argfile(s) ) ...

@strong{parallel} --semaphore [options] @emph{command}

@strong{#!/usr/bin/parallel} --shebang [options] [@emph{command} [arguments]]

@node DESCRIPTION
@chapter DESCRIPTION

GNU @strong{parallel} is a shell tool for executing jobs in parallel using
one or more computers. A job can be a single command or a small
script that has to be run for each of the lines in the input. The
typical input is a list of files, a list of hosts, a list of users, a
list of URLs, or a list of tables. A job can also be a command that
reads from a pipe. GNU @strong{parallel} can then split the input into
blocks and pipe a block into each command in parallel.

If you use xargs and tee today you will find GNU @strong{parallel} very easy to
use as GNU @strong{parallel} is written to have the same options as xargs. If
you write loops in shell, you will find GNU @strong{parallel} may be able to
replace most of the loops and make them run faster by running several
jobs in parallel.

GNU @strong{parallel} makes sure output from the commands is the same output as
you would get had you run the commands sequentially. This makes it
possible to use output from GNU @strong{parallel} as input for other programs.

For each line of input GNU @strong{parallel} will execute @emph{command} with
the line as arguments. If no @emph{command} is given, the line of input is
executed. Several lines will be run in parallel. GNU @strong{parallel} can
often be used as a substitute for @strong{xargs} or @strong{cat | bash}.

@menu
* Reader's guide::
@end menu

@node Reader's guide
@section Reader's guide

Start by watching the intro videos for a quick introduction:
http://www.youtube.com/playlist?list=PL284C9FF2488BC6D1

Then look at the @strong{EXAMPLE}s after the list of @strong{OPTIONS}. That will
give you an idea of what GNU @strong{parallel} is capable of.

Then spend an hour walking through the tutorial (@strong{man
parallel_tutorial}). Your command line will love you for it.

Finally you may want to look at the rest of this manual if you have
special needs not already covered.

@node OPTIONS
@chapter OPTIONS

@table @asis
@item @emph{command}
@anchor{@emph{command}}

Command to execute.  If @emph{command} or the following arguments contain
replacement strings (such as @strong{@{@}}) every instance will be substituted
with the input.

If @emph{command} is given, GNU @strong{parallel} solve the same tasks as
@strong{xargs}. If @emph{command} is not given GNU @strong{parallel} will behave
similar to @strong{cat | sh}.

The @emph{command} must be an executable, a script, a composed command, or
a function.

If it is a Bash function you need to @strong{export -f} the function
first. To use aliases copy the full environment as described under
@strong{--env} and use @strong{env_parallel} instead of @strong{parallel}.

The command cannot contain the character \257 (macron: Â¯).

@item @strong{@{@}} (alpha testing)
@anchor{@strong{@{@}} (alpha testing)}

Input line. This replacement string will be replaced by a full line
read from the input source. The input source is normally stdin
(standard input), but can also be given with @strong{-a}, @strong{:::}, or
@strong{::::}.

The replacement string @strong{@{@}} can be changed with @strong{-I}.

If the command line contains no replacement strings then @strong{@{@}} will be
appended to the command line.

@item @strong{@{.@}} (alpha testing)
@anchor{@strong{@{.@}} (alpha testing)}

Input line without extension. This replacement string will be replaced
by the input with the extension removed. If the input line contains
@strong{.} after the last @strong{/} the last @strong{.} till the end of the string will
be removed and @strong{@{.@}} will be replaced with the
remaining. E.g. @emph{foo.jpg} becomes @emph{foo}, @emph{subdir/foo.jpg} becomes
@emph{subdir/foo}, @emph{sub.dir/foo.jpg} becomes @emph{sub.dir/foo},
@emph{sub.dir/bar} remains @emph{sub.dir/bar}. If the input line does not
contain @strong{.} it will remain unchanged.

The replacement string @strong{@{.@}} can be changed with @strong{--er}.

To understand replacement strings see @strong{@{@}}.

@item @strong{@{/@}} (alpha testing)
@anchor{@strong{@{/@}} (alpha testing)}

Basename of input line. This replacement string will be replaced by
the input with the directory part removed.

The replacement string @strong{@{/@}} can be changed with
@strong{--basenamereplace}.

To understand replacement strings see @strong{@{@}}.

@item @strong{@{//@}} (alpha testing)
@anchor{@strong{@{//@}} (alpha testing)}

Dirname of input line. This replacement string will be replaced by the
dir of the input line. See @strong{dirname}(1).

The replacement string @strong{@{//@}} can be changed with
@strong{--dirnamereplace}.

To understand replacement strings see @strong{@{@}}.

@item @strong{@{/.@}} (alpha testing)
@anchor{@strong{@{/.@}} (alpha testing)}

Basename of input line without extension. This replacement string will
be replaced by the input with the directory and extension part
removed. It is a combination of @strong{@{/@}} and @strong{@{.@}}.

The replacement string @strong{@{/.@}} can be changed with
@strong{--basenameextensionreplace}.

To understand replacement strings see @strong{@{@}}.

@item @strong{@{#@}} (alpha testing)
@anchor{@strong{@{#@}} (alpha testing)}

Sequence number of the job to run. This replacement string will be
replaced by the sequence number of the job being run. It contains the
same number as $PARALLEL_SEQ.

The replacement string @strong{@{#@}} can be changed with @strong{--seqreplace}.

To understand replacement strings see @strong{@{@}}.

@item @strong{@{%@}} (alpha testing)
@anchor{@strong{@{%@}} (alpha testing)}

Job slot number. This replacement string will be replaced by the job's
slot number between 1 and number of jobs to run in parallel. There
will never be 2 jobs running at the same time with the same job slot
number.

The replacement string @strong{@{%@}} can be changed with @strong{--slotreplace}.

To understand replacement strings see @strong{@{@}}.

@item @strong{@{}@emph{n}@strong{@}} (alpha testing)
@anchor{@strong{@{}@emph{n}@strong{@}} (alpha testing)}

Argument from input source @emph{n} or the @emph{n}'th argument. This
positional replacement string will be replaced by the input from input
source @emph{n} (when used with @strong{-a} or @strong{::::}) or with the @emph{n}'th
argument (when used with @strong{-N}). If @emph{n} is negative it refers to the
@emph{n}'th last argument.

To understand replacement strings see @strong{@{@}}.

@item @strong{@{}@emph{n}.@strong{@}} (alpha testing)
@anchor{@strong{@{}@emph{n}.@strong{@}} (alpha testing)}

Argument from input source @emph{n} or the @emph{n}'th argument without
extension. It is a combination of @strong{@{}@emph{n}@strong{@}} and @strong{@{.@}}.

This positional replacement string will be replaced by the input from
input source @emph{n} (when used with @strong{-a} or @strong{::::}) or with the
@emph{n}'th argument (when used with @strong{-N}). The input will have the
extension removed.

To understand positional replacement strings see @strong{@{}@emph{n}@strong{@}}.

@item @strong{@{}@emph{n}/@strong{@}} (alpha testing)
@anchor{@strong{@{}@emph{n}/@strong{@}} (alpha testing)}

Basename of argument from input source @emph{n} or the @emph{n}'th argument.
It is a combination of @strong{@{}@emph{n}@strong{@}} and @strong{@{/@}}.

This positional replacement string will be replaced by the input from
input source @emph{n} (when used with @strong{-a} or @strong{::::}) or with the
@emph{n}'th argument (when used with @strong{-N}). The input will have the
directory (if any) removed.

To understand positional replacement strings see @strong{@{}@emph{n}@strong{@}}.

@item @strong{@{}@emph{n}//@strong{@}} (alpha testing)
@anchor{@strong{@{}@emph{n}//@strong{@}} (alpha testing)}

Dirname of argument from input source @emph{n} or the @emph{n}'th argument.
It is a combination of @strong{@{}@emph{n}@strong{@}} and @strong{@{//@}}.

This positional replacement string will be replaced by the dir of the
input from input source @emph{n} (when used with @strong{-a} or @strong{::::}) or with
the @emph{n}'th argument (when used with @strong{-N}). See @strong{dirname}(1).

To understand positional replacement strings see @strong{@{}@emph{n}@strong{@}}.

@item @strong{@{}@emph{n}/.@strong{@}} (alpha testing)
@anchor{@strong{@{}@emph{n}/.@strong{@}} (alpha testing)}

Basename of argument from input source @emph{n} or the @emph{n}'th argument
without extension.  It is a combination of @strong{@{}@emph{n}@strong{@}}, @strong{@{/@}}, and
@strong{@{.@}}.

This positional replacement string will be replaced by the input from
input source @emph{n} (when used with @strong{-a} or @strong{::::}) or with the
@emph{n}'th argument (when used with @strong{-N}). The input will have the
directory (if any) and extension removed.

To understand positional replacement strings see @strong{@{}@emph{n}@strong{@}}.

@item @strong{@{=}@emph{perl expression}@strong{=@}} (alpha testing)
@anchor{@strong{@{=}@emph{perl expression}@strong{=@}} (alpha testing)}

Replace with calculated @emph{perl expression}. @strong{$_} will contain the
same as @strong{@{@}}. After evaluating @emph{perl expression} @strong{$_} will be used
as the value. It is recommended to only change $_ but you have full
access to all of GNU @strong{parallel}'s internal functions and data
structures.

The @strong{@{=}@emph{perl expression}@strong{=@}} must be given as a single string.

See also: @strong{--rpl} @strong{--parens}

@item @strong{@{=}@emph{n} @emph{perl expression}@strong{=@}} (alpha testing)
@anchor{@strong{@{=}@emph{n} @emph{perl expression}@strong{=@}} (alpha testing)}

Positional equivalent to @strong{@{= perl expression =@}}. To understand
positional replacement strings see @strong{@{}@emph{n}@strong{@}}.

See also: @strong{@{= perl expression =@}} @strong{@{}@emph{n}@strong{@}}.

@item @strong{:::} @emph{arguments}
@anchor{@strong{:::} @emph{arguments}}

Use arguments from the command line as input source instead of stdin
(standard input). Unlike other options for GNU @strong{parallel} @strong{:::} is
placed after the @emph{command} and before the arguments.

The following are equivalent:

@verbatim
  (echo file1; echo file2) | parallel gzip
  parallel gzip ::: file1 file2
  parallel gzip {} ::: file1 file2
  parallel --arg-sep ,, gzip {} ,, file1 file2
  parallel --arg-sep ,, gzip ,, file1 file2
  parallel ::: "gzip file1" "gzip file2"
@end verbatim

To avoid treating @strong{:::} as special use @strong{--arg-sep} to set the
argument separator to something else. See also @strong{--arg-sep}.

stdin (standard input) will be passed to the first process run.

If multiple @strong{:::} are given, each group will be treated as an input
source, and all combinations of input sources will be
generated. E.g. ::: 1 2 ::: a b c will result in the combinations
(1,a) (1,b) (1,c) (2,a) (2,b) (2,c). This is useful for replacing
nested for-loops.

@strong{:::} and @strong{::::} can be mixed. So these are equivalent:

@verbatim
  parallel echo {1} {2} {3} ::: 6 7 ::: 4 5 ::: 1 2 3
  parallel echo {1} {2} {3} :::: <(seq 6 7) <(seq 4 5) \
    :::: <(seq 1 3)
  parallel -a <(seq 6 7) echo {1} {2} {3} :::: <(seq 4 5) \
    :::: <(seq 1 3)
  parallel -a <(seq 6 7) -a <(seq 4 5) echo {1} {2} {3} \
    ::: 1 2 3
  seq 6 7 | parallel -a - -a <(seq 4 5) echo {1} {2} {3} \
    ::: 1 2 3
  seq 4 5 | parallel echo {1} {2} {3} :::: <(seq 6 7) - \
    ::: 1 2 3
@end verbatim

@item @strong{::::} @emph{argfiles}
@anchor{@strong{::::} @emph{argfiles}}

Another way to write @strong{-a} @emph{argfile1} @strong{-a} @emph{argfile2} ...

@strong{:::} and @strong{::::} can be mixed.

See @strong{-a}, @strong{:::} and @strong{--xapply}.

@item @strong{--null}
@anchor{@strong{--null}}

@item @strong{-0}
@anchor{@strong{-0}}

Use NUL as delimiter.  Normally input lines will end in \n
(newline). If they end in \0 (NUL), then use this option. It is useful
for processing arguments that may contain \n (newline).

@item @strong{--arg-file} @emph{input-file}
@anchor{@strong{--arg-file} @emph{input-file}}

@item @strong{-a} @emph{input-file}
@anchor{@strong{-a} @emph{input-file}}

Use @emph{input-file} as input source. If you use this option, stdin
(standard input) is given to the first process run.  Otherwise, stdin
(standard input) is redirected from /dev/null.

If multiple @strong{-a} are given, each @emph{input-file} will be treated as an
input source, and all combinations of input sources will be
generated. E.g. The file @strong{foo} contains @strong{1 2}, the file @strong{bar}
contains @strong{a b c}.  @strong{-a foo} @strong{-a bar} will result in the combinations
(1,a) (1,b) (1,c) (2,a) (2,b) (2,c). This is useful for replacing
nested for-loops.

See also @strong{--xapply} and @strong{@{}@emph{n}@strong{@}}.

@item @strong{--arg-file-sep} @emph{sep-str}
@anchor{@strong{--arg-file-sep} @emph{sep-str}}

Use @emph{sep-str} instead of @strong{::::} as separator string between command
and argument files. Useful if @strong{::::} is used for something else by the
command.

See also: @strong{::::}.

@item @strong{--arg-sep} @emph{sep-str}
@anchor{@strong{--arg-sep} @emph{sep-str}}

Use @emph{sep-str} instead of @strong{:::} as separator string. Useful if @strong{:::}
is used for something else by the command.

Also useful if you command uses @strong{:::} but you still want to read
arguments from stdin (standard input): Simply change @strong{--arg-sep} to a
string that is not in the command line.

See also: @strong{:::}.

@item @strong{--bar}
@anchor{@strong{--bar}}

Show progress as a progress bar. In the bar is shown: % of jobs
completed, estimated seconds left, and number of jobs started.

It is compatible with @strong{zenity}:

@verbatim
  seq 1000 | parallel -j30 --bar '(echo {};sleep 0.1)' \
    2> >(zenity --progress --auto-kill) | wc
@end verbatim

@item @strong{--basefile} @emph{file}
@anchor{@strong{--basefile} @emph{file}}

@item @strong{--bf} @emph{file}
@anchor{@strong{--bf} @emph{file}}

@emph{file} will be transferred to each sshlogin before a jobs is
started. It will be removed if @strong{--cleanup} is active. The file may be
a script to run or some common base data needed for the jobs.
Multiple @strong{--bf} can be specified to transfer more basefiles. The
@emph{file} will be transferred the same way as @strong{--transfer}.

@item @strong{--basenamereplace} @emph{replace-str}
@anchor{@strong{--basenamereplace} @emph{replace-str}}

@item @strong{--bnr} @emph{replace-str}
@anchor{@strong{--bnr} @emph{replace-str}}

Use the replacement string @emph{replace-str} instead of @strong{@{/@}} for
basename of input line.

@item @strong{--basenameextensionreplace} @emph{replace-str}
@anchor{@strong{--basenameextensionreplace} @emph{replace-str}}

@item @strong{--bner} @emph{replace-str}
@anchor{@strong{--bner} @emph{replace-str}}

Use the replacement string @emph{replace-str} instead of @strong{@{/.@}} for basename of input line without extension.

@item @strong{--bg}
@anchor{@strong{--bg}}

Run command in background thus GNU @strong{parallel} will not wait for
completion of the command before exiting. This is the default if
@strong{--semaphore} is set.

See also: @strong{--fg}, @strong{man sem}.

Implies @strong{--semaphore}.

@item @strong{--bibtex}
@anchor{@strong{--bibtex}}

Print the BibTeX entry for GNU @strong{parallel} and disable citation
notice.

@item @strong{--block} @emph{size}
@anchor{@strong{--block} @emph{size}}

@item @strong{--block-size} @emph{size}
@anchor{@strong{--block-size} @emph{size}}

Size of block in bytes. The @emph{size} can be postfixed with K, M, G, T, P,
k, m, g, t, or p which would multiply the size with 1024, 1048576,
1073741824, 1099511627776, 1125899906842624, 1000, 1000000,
1000000000, 1000000000000, or 1000000000000000 respectively.

GNU @strong{parallel} tries to meet the block size but can be off by the
length of one record. For performance reasons @emph{size} should be bigger
than a single record.

@emph{size} defaults to 1M.

See @strong{--pipe} and @strong{--pipepart} for use of this.

@item @strong{--cat} (alpha testing)
@anchor{@strong{--cat} (alpha testing)}

Create a temporary file with content. Normally @strong{--pipe}/@strong{--pipepart}
will give data to the program on stdin (standard input). With @strong{--cat}
GNU @strong{parallel} will create a temporary file with the name in @{@}, so
you can do: @strong{parallel --pipe --cat wc @{@}}.

See also @strong{--fifo}.

@item @strong{--cleanup} (alpha testing)
@anchor{@strong{--cleanup} (alpha testing)}

Remove transferred files. @strong{--cleanup} will remove the transferred files
on the remote computer after processing is done.

@verbatim
  find log -name '*gz' | parallel \
    --sshlogin server.example.com --transfer \
    --return {.}.bz2 --cleanup "zcat {} | bzip -9 >{.}.bz2"
@end verbatim

With @strong{--transfer} the file transferred to the remote computer will be
removed on the remote computer.  Directories created will not be removed
- even if they are empty.

With @strong{--return} the file transferred from the remote computer will be
removed on the remote computer.  Directories created will not be removed
- even if they are empty.

@strong{--cleanup} is ignored when not used with @strong{--transfer} or @strong{--return}.

@item @strong{--colsep} @emph{regexp}
@anchor{@strong{--colsep} @emph{regexp}}

@item @strong{-C} @emph{regexp}
@anchor{@strong{-C} @emph{regexp}}

Column separator. The input will be treated as a table with @emph{regexp}
separating the columns. The n'th column can be access using
@strong{@{}@emph{n}@strong{@}} or @strong{@{}@emph{n}.@strong{@}}. E.g. @strong{@{3@}} is the 3rd column.

@strong{--colsep} implies @strong{--trim rl}.

@emph{regexp} is a Perl Regular Expression:
http://perldoc.perl.org/perlre.html

@item @strong{--compress}
@anchor{@strong{--compress}}

Compress temporary files. If the output is big and very compressible
this will take up less disk space in $TMPDIR and possibly be faster
due to less disk I/O.

GNU @strong{parallel} will try @strong{lzop}, @strong{pigz}, @strong{gzip}, @strong{pbzip2},
@strong{plzip}, @strong{bzip2}, @strong{lzma}, @strong{lzip}, @strong{xz} in that order, and use the
first available.

@item @strong{--compress-program} @emph{prg}
@anchor{@strong{--compress-program} @emph{prg}}

@item @strong{--decompress-program} @emph{prg}
@anchor{@strong{--decompress-program} @emph{prg}}

Use @emph{prg} for (de)compressing temporary files. It is assumed that @emph{prg
-dc} will decompress stdin (standard input) to stdout (standard
output) unless @strong{--decompress-program} is given.

@item @strong{--ctrlc}
@anchor{@strong{--ctrlc}}

If receiving SIGNING, GNU @strong{parallel} will send SIGINT to tasks
running on remote computers thus killing them.

@item @strong{--delimiter} @emph{delim}
@anchor{@strong{--delimiter} @emph{delim}}

@item @strong{-d} @emph{delim}
@anchor{@strong{-d} @emph{delim}}

Input items are terminated by @emph{delim}.  Quotes and backslash are not
special; every character in the input is taken literally.  Disables
the end-of-file string, which is treated like any other argument. The
specified delimiter may be characters, C-style character escapes such
as \n, or octal or hexadecimal escape codes.  Octal and hexadecimal
escape codes are understood as for the printf command.  Multibyte
characters are not supported.

@item @strong{--dirnamereplace} @emph{replace-str}
@anchor{@strong{--dirnamereplace} @emph{replace-str}}

@item @strong{--dnr} @emph{replace-str}
@anchor{@strong{--dnr} @emph{replace-str}}

Use the replacement string @emph{replace-str} instead of @strong{@{//@}} for
dirname of input line.

@item @strong{-E} @emph{eof-str}
@anchor{@strong{-E} @emph{eof-str}}

Set the end of file string to @emph{eof-str}.  If the end of file string
occurs as a line of input, the rest of the input is not read.  If
neither @strong{-E} nor @strong{-e} is used, no end of file string is used.

@item @strong{--delay} @emph{secs}
@anchor{@strong{--delay} @emph{secs}}

Delay starting next job @emph{secs} seconds. GNU @strong{parallel} will pause
@emph{secs} seconds after starting each job. @emph{secs} can be less than 1
second.

@item @strong{--dry-run}
@anchor{@strong{--dry-run}}

Print the job to run on stdout (standard output), but do not run the
job. Use @strong{-v -v} to include the wrapping that GNU Parallel generates
(for remote jobs, @strong{--tmux}, @strong{--nice}, @strong{--pipe}, @strong{--pipepart},
@strong{--fifo} and @strong{--cat}). Do not count on this literaly, though, as the
job may be scheduled on another computer or the local computer if : is
in the list.

@item @strong{--eof}[=@emph{eof-str}]
@anchor{@strong{--eof}[=@emph{eof-str}]}

@item @strong{-e}[@emph{eof-str}]
@anchor{@strong{-e}[@emph{eof-str}]}

This option is a synonym for the @strong{-E} option.  Use @strong{-E} instead,
because it is POSIX compliant for @strong{xargs} while this option is not.
If @emph{eof-str} is omitted, there is no end of file string.  If neither
@strong{-E} nor @strong{-e} is used, no end of file string is used.

@item @strong{--env} @emph{var} (alpha testing)
@anchor{@strong{--env} @emph{var} (alpha testing)}

Copy environment variable @emph{var}. This will copy @emph{var} to the
environment that the command is run in. This is especially useful for
remote execution.

In Bash @emph{var} can also be a Bash function - just remember to @strong{export
-f} the function, see @strong{command}.

The variable '_' is special. It will copy all exported environment
variables except for the ones mentioned in ~/.parallel/ignored_vars.

To copy Bash arrays you need an importer function, as Bash arrays
cannot be exported:

@verbatim
    import_array () {
      local func=$1; shift;
      export $func='() {
        '"$(for arr in $@; do
              declare -p $arr|sed '1s/declare -./&g/'
            done)"'
      }'
    }

    declare -A assoc='([one]="1" [two]="2")'
    declare -a indexed='([0]="one" [1]="two")'

    import_array my_importer assoc indexed

    parallel --env my_importer \
      'my_importer; echo "{}" "${indexed[{}]}" "${assoc[${indexed[{}]}]}"' ::: "${!indexed[@]}"
@end verbatim

To copy the full environment (both exported and not exported variables
and functions) use this function (e.g. by putting it in .bashrc):

@verbatim
    env_parallel() {
      export parallel_bash_environment="$(echo "shopt -s expand_aliases 2>/dev/null"; alias;typeset -p | grep -vFf <(readonly; echo GROUPS; echo FUNCNAME; echo DIRSTACK; echo _; echo PIPESTATUS; echo USERNAME) | grep -v BASH_;typeset -f)";
      `which parallel` "$@";
      unset parallel_bash_environment;
    }
    # call as:
    env_parallel [normal parallel options]
@end verbatim

See also: @strong{--record-env}.

@item @strong{--eta}
@anchor{@strong{--eta}}

Show the estimated number of seconds before finishing. This forces GNU
@strong{parallel} to read all jobs before starting to find the number of
jobs. GNU @strong{parallel} normally only reads the next job to run.

Implies @strong{--progress}.

See also: @strong{--bar}, @strong{--progress}.

@item @strong{--fg}
@anchor{@strong{--fg}}

Run command in foreground thus GNU @strong{parallel} will wait for
completion of the command before exiting.

Implies @strong{--semaphore}.

See also @strong{--bg}, @strong{man sem}.

@item @strong{--fifo} (alpha testing)
@anchor{@strong{--fifo} (alpha testing)}

Create a temporary fifo with content. Normally @strong{--pipe} and
@strong{--pipepart} will give data to the program on stdin (standard
input). With @strong{--fifo} GNU @strong{parallel} will create a temporary fifo
with the name in @{@}, so you can do: @strong{parallel --pipe --fifo wc @{@}}.

Beware: If data is not read from the fifo, the job will block forever.

See also @strong{--cat}.

@item @strong{--filter-hosts}
@anchor{@strong{--filter-hosts}}

Remove down hosts. For each remote host: check that login through ssh
works. If not: do not use this host.

Currently you can @emph{not} put @strong{--filter-hosts} in a profile,
$PARALLEL, /etc/parallel/config or similar. This is because GNU
@strong{parallel} uses GNU @strong{parallel} to compute this, so you will get an
infinite loop. This will likely be fixed in a later release.

@item @strong{--gnu}
@anchor{@strong{--gnu}}

Behave like GNU @strong{parallel}. This option historically took precedence
over @strong{--tollef}. The @strong{--tollef} option is now retired, and therefore
may not be used. @strong{--gnu} is kept for compatibility.

@item @strong{--group}
@anchor{@strong{--group}}

Group output. Output from each jobs is grouped together and is only
printed when the command is finished. stderr (standard error) first
followed by stdout (standard output). This takes some CPU time. In
rare situations GNU @strong{parallel} takes up lots of CPU time and if it is
acceptable that the outputs from different commands are mixed
together, then disabling grouping with @strong{-u} can speedup GNU
@strong{parallel} by a factor of 10.

@strong{--group} is the default. Can be reversed with @strong{-u}.

See also: @strong{--line-buffer} @strong{--ungroup}

@item @strong{--help}
@anchor{@strong{--help}}

@item @strong{-h}
@anchor{@strong{-h}}

Print a summary of the options to GNU @strong{parallel} and exit.

@item @strong{--halt-on-error} @emph{val} (alpha testing)
@anchor{@strong{--halt-on-error} @emph{val} (alpha testing)}

@item @strong{--halt} @emph{val} (alpha testing)
@anchor{@strong{--halt} @emph{val} (alpha testing)}

How should GNU @strong{parallel} terminate?

@table @asis
@item 0
@anchor{0}

Do not halt if a job fails. Exit status will be the number of jobs
failed. This is the default.

@item 1
@anchor{1}

Do not start new jobs if a job fails, but complete the running jobs
including cleanup. The exit status will be the exit status from the
last failing job.

@item 2
@anchor{2}

Kill off all jobs immediately and exit without cleanup. The exit
status will be the exit status from the failing job.

@item -1
@anchor{-1}

Do not start new jobs if a job succeeds, but complete the running jobs
including cleanup. The exit status will be the exit status from the
last failing job if any.

@item -2
@anchor{-2}

Kill off all jobs immediately and exit without cleanup. The exit
status will be 0.

@item 1-99%
@anchor{1-99%}

If @emph{val}% of the jobs fail and minimum 3: Do not start new jobs, but
complete the running jobs including cleanup. The exit status will be
the exit status from the last failing job.

@end table

@item @strong{--header} @emph{regexp}
@anchor{@strong{--header} @emph{regexp}}

Use regexp as header. For normal usage the matched header (typically
the first line: @strong{--header '.*\n'}) will be split using @strong{--colsep}
(which will default to '\t') and column names can be used as
replacement variables: @strong{@{column name@}}.

For @strong{--pipe} the matched header will be prepended to each output.

@strong{--header :} is an alias for @strong{--header '.*\n'}.

If @emph{regexp} is a number, it is a fixed number of lines.

@item @strong{--hostgroups} (beta testing)
@anchor{@strong{--hostgroups} (beta testing)}

@item @strong{--hgrp} (beta testing)
@anchor{@strong{--hgrp} (beta testing)}

Enable hostgroups on arguments. If an argument contains '@@' the string
after '@@' will be removed and treated as a list of hostgroups on which
this job is allowed to run. If there is no @strong{--sshlogin} with a
corresponding group, the job will run on any hostgroup.

Example:

@verbatim
  parallel --hostgroups \
    --sshlogin @grp1/myserver1 -S @grp1+grp2/myserver2 \
    --sshlogin @grp3/myserver3 \
    echo ::: my_grp1_arg@grp1 arg_for_grp2@grp2 third_arg@grp1+grp3
@end verbatim

@strong{my_grp1_arg} may be run on either @strong{myserver1} or @strong{myserver2},
@strong{third_arg} may be run on either @strong{myserver1} or @strong{myserver3},
but @strong{arg_for_grp2} will only be run on @strong{myserver2}.

@item @strong{-I} @emph{replace-str}
@anchor{@strong{-I} @emph{replace-str}}

Use the replacement string @emph{replace-str} instead of @{@}.

@item @strong{--replace}[=@emph{replace-str}]
@anchor{@strong{--replace}[=@emph{replace-str}]}

@item @strong{-i}[@emph{replace-str}]
@anchor{@strong{-i}[@emph{replace-str}]}

This option is a synonym for @strong{-I}@emph{replace-str} if @emph{replace-str} is
specified, and for @strong{-I}@{@} otherwise.  This option is deprecated;
use @strong{-I} instead.

@item @strong{--joblog} @emph{logfile}
@anchor{@strong{--joblog} @emph{logfile}}

Logfile for executed jobs. Save a list of the executed jobs to
@emph{logfile} in the following TAB separated format: sequence number,
sshlogin, start time as seconds since epoch, run time in seconds,
bytes in files transferred, bytes in files returned, exit status,
signal, and command run.

To convert the times into ISO-8601 strict do:

@verbatim
  perl -a -F"\t" -ne \
    'chomp($F[2]=`date -d \@$F[2] +%FT%T`); print join("\t",@F)'
@end verbatim

See also @strong{--resume} @strong{--resume-failed}.

@item @strong{--jobs} @emph{N}
@anchor{@strong{--jobs} @emph{N}}

@item @strong{-j} @emph{N}
@anchor{@strong{-j} @emph{N}}

@item @strong{--max-procs} @emph{N}
@anchor{@strong{--max-procs} @emph{N}}

@item @strong{-P} @emph{N}
@anchor{@strong{-P} @emph{N}}

Number of jobslots. Run up to N jobs in parallel.  0 means as many as
possible. Default is 100% which will run one job per CPU core.

If @strong{--semaphore} is set default is 1 thus making a mutex.

@item @strong{--jobs} @emph{+N}
@anchor{@strong{--jobs} @emph{+N}}

@item @strong{-j} @emph{+N}
@anchor{@strong{-j} @emph{+N}}

@item @strong{--max-procs} @emph{+N}
@anchor{@strong{--max-procs} @emph{+N}}

@item @strong{-P} @emph{+N}
@anchor{@strong{-P} @emph{+N}}

Add N to the number of CPU cores.  Run this many jobs in parallel.
See also @strong{--use-cpus-instead-of-cores}.

@item @strong{--jobs} @emph{-N}
@anchor{@strong{--jobs} @emph{-N}}

@item @strong{-j} @emph{-N}
@anchor{@strong{-j} @emph{-N}}

@item @strong{--max-procs} @emph{-N}
@anchor{@strong{--max-procs} @emph{-N}}

@item @strong{-P} @emph{-N}
@anchor{@strong{-P} @emph{-N}}

Subtract N from the number of CPU cores.  Run this many jobs in parallel.
If the evaluated number is less than 1 then 1 will be used.  See also
@strong{--use-cpus-instead-of-cores}.

@item @strong{--jobs} @emph{N}%
@anchor{@strong{--jobs} @emph{N}%}

@item @strong{-j} @emph{N}%
@anchor{@strong{-j} @emph{N}%}

@item @strong{--max-procs} @emph{N}%
@anchor{@strong{--max-procs} @emph{N}%}

@item @strong{-P} @emph{N}%
@anchor{@strong{-P} @emph{N}%}

Multiply N% with the number of CPU cores.  Run this many jobs in
parallel. See also @strong{--use-cpus-instead-of-cores}.

@item @strong{--jobs} @emph{procfile}
@anchor{@strong{--jobs} @emph{procfile}}

@item @strong{-j} @emph{procfile}
@anchor{@strong{-j} @emph{procfile}}

@item @strong{--max-procs} @emph{procfile}
@anchor{@strong{--max-procs} @emph{procfile}}

@item @strong{-P} @emph{procfile}
@anchor{@strong{-P} @emph{procfile}}

Read parameter from file. Use the content of @emph{procfile} as parameter
for @emph{-j}. E.g. @emph{procfile} could contain the string 100% or +2 or
10. If @emph{procfile} is changed when a job completes, @emph{procfile} is
read again and the new number of jobs is computed. If the number is
lower than before, running jobs will be allowed to finish but new jobs
will not be started until the wanted number of jobs has been reached.
This makes it possible to change the number of simultaneous running
jobs while GNU @strong{parallel} is running.

@item @strong{--keep-order}
@anchor{@strong{--keep-order}}

@item @strong{-k}
@anchor{@strong{-k}}

Keep sequence of output same as the order of input. Normally the
output of a job will be printed as soon as the job completes. Try this
to see the difference:

@verbatim
  parallel -j4 sleep {}\; echo {} ::: 2 1 4 3
  parallel -j4 -k sleep {}\; echo {} ::: 2 1 4 3
@end verbatim

If used with @strong{--onall} or @strong{--nonall} the output will grouped by
sshlogin in sorted order.

@item @strong{-L} @emph{max-lines}
@anchor{@strong{-L} @emph{max-lines}}

When used with @strong{--pipe}: Read records of @emph{max-lines}.

When used otherwise: Use at most @emph{max-lines} nonblank input lines per
command line.  Trailing blanks cause an input line to be logically
continued on the next input line.

@strong{-L 0} means read one line, but insert 0 arguments on the command
line.

Implies @strong{-X} unless @strong{-m}, @strong{--xargs}, or @strong{--pipe} is set.

@item @strong{--max-lines}[=@emph{max-lines}]
@anchor{@strong{--max-lines}[=@emph{max-lines}]}

@item @strong{-l}[@emph{max-lines}]
@anchor{@strong{-l}[@emph{max-lines}]}

When used with @strong{--pipe}: Read records of @emph{max-lines}.

When used otherwise: Synonym for the @strong{-L} option.  Unlike @strong{-L}, the
@emph{max-lines} argument is optional.  If @emph{max-lines} is not specified,
it defaults to one.  The @strong{-l} option is deprecated since the POSIX
standard specifies @strong{-L} instead.

@strong{-l 0} is an alias for @strong{-l 1}.

Implies @strong{-X} unless @strong{-m}, @strong{--xargs}, or @strong{--pipe} is set.

@item @strong{--line-buffer}
@anchor{@strong{--line-buffer}}

Buffer output on line basis. @strong{--group} will keep the output together
for a whole job. @strong{--ungroup} allows output to mixup with half a line
coming from one job and half a line coming from another
job. @strong{--line-buffer} fits between these two: GNU @strong{parallel} will
print a full line, but will allow for mixing lines of different jobs.

@strong{--line-buffer} takes more CPU power than than both @strong{--group} and
@strong{--ungroup}, but can be faster than @strong{--group} if the CPU is not the
limiting factor.

See also: @strong{--group} @strong{--ungroup}

@item @strong{--load} @emph{max-load} (alpha testing)
@anchor{@strong{--load} @emph{max-load} (alpha testing)}

Do not start new jobs on a given computer unless the number of running
processes on the computer is less than @emph{max-load}. @emph{max-load} uses
the same syntax as @strong{--jobs}, so @emph{100%} for one per CPU is a valid
setting. Only difference is 0 which is interpreted as 0.01.

@item @strong{--controlmaster}
@anchor{@strong{--controlmaster}}

@item @strong{-M}
@anchor{@strong{-M}}

Use ssh's ControlMaster to make ssh connections faster. Useful if jobs
run remote and are very fast to run. This is disabled for sshlogins
that specify their own ssh command.

@item @strong{--xargs}
@anchor{@strong{--xargs}}

Multiple arguments. Insert as many arguments as the command line
length permits.

If @strong{@{@}} is not used the arguments will be appended to the
line.  If @strong{@{@}} is used multiple times each @strong{@{@}} will be replaced
with all the arguments.

Support for @strong{--xargs} with @strong{--sshlogin} is limited and may fail.

See also @strong{-X} for context replace. If in doubt use @strong{-X} as that will
most likely do what is needed.

@item @strong{-m}
@anchor{@strong{-m}}

Multiple arguments. Insert as many arguments as the command line
length permits. If multiple jobs are being run in parallel: distribute
the arguments evenly among the jobs. Use @strong{-j1} to avoid this.

If @strong{@{@}} is not used the arguments will be appended to the
line.  If @strong{@{@}} is used multiple times each @strong{@{@}} will be replaced
with all the arguments.

Support for @strong{-m} with @strong{--sshlogin} is limited and may fail.

See also @strong{-X} for context replace. If in doubt use @strong{-X} as that will
most likely do what is needed.

@item @strong{--memfree} @emph{size} (alpha testing)
@anchor{@strong{--memfree} @emph{size} (alpha testing)}

Minimum memory free when starting another job. The @emph{size} can be
postfixed with K, M, G, T, P, k, m, g, t, or p which would multiply
the size with 1024, 1048576, 1073741824, 1099511627776,
1125899906842624, 1000, 1000000, 1000000000, 1000000000000, or
1000000000000000 respectively.

If the jobs take up very different amount of RAM, GNU @strong{parallel} will
only start as many as there is memory for. If less than @emph{size} bytes
are free, no more jobs will be started. If less than 50% @emph{size} bytes
are free, the youngest job will be killed, and put back on the queue
to be run later.

@item @strong{--minversion} @emph{version}
@anchor{@strong{--minversion} @emph{version}}

Print the version GNU @strong{parallel} and exit.  If the current version of
GNU @strong{parallel} is less than @emph{version} the exit code is
255. Otherwise it is 0.

This is useful for scripts that depend on features only available from
a certain version of GNU @strong{parallel}.

@item @strong{--nonall}
@anchor{@strong{--nonall}}

@strong{--onall} with no arguments. Run the command on all computers given
with @strong{--sshlogin} but take no arguments. GNU @strong{parallel} will log
into @strong{--jobs} number of computers in parallel and run the job on the
computer. @strong{-j} adjusts how many computers to log into in parallel.

This is useful for running the same command (e.g. uptime) on a list of
servers.

@item @strong{--onall}
@anchor{@strong{--onall}}

Run all the jobs on all computers given with @strong{--sshlogin}. GNU
@strong{parallel} will log into @strong{--jobs} number of computers in parallel
and run one job at a time on the computer. The order of the jobs will
not be changed, but some computers may finish before others.

When using @strong{--group} the output will be grouped by each server, so
all the output from one server will be grouped together.

@strong{--joblog} will contain an entry for each job on each server, so
there will be several job sequence 1.

@item @strong{--output-as-files}
@anchor{@strong{--output-as-files}}

@item @strong{--outputasfiles}
@anchor{@strong{--outputasfiles}}

@item @strong{--files}
@anchor{@strong{--files}}

Instead of printing the output to stdout (standard output) the output
of each job is saved in a file and the filename is then printed.

See also: @strong{--results}

@item @strong{--pipe}
@anchor{@strong{--pipe}}

@item @strong{--spreadstdin}
@anchor{@strong{--spreadstdin}}

Spread input to jobs on stdin (standard input). Read a block of data
from stdin (standard input) and give one block of data as input to one
job.

The block size is determined by @strong{--block}. The strings @strong{--recstart}
and @strong{--recend} tell GNU @strong{parallel} how a record starts and/or
ends. The block read will have the final partial record removed before
the block is passed on to the job. The partial record will be
prepended to next block.

If @strong{--recstart} is given this will be used to split at record start.

If @strong{--recend} is given this will be used to split at record end.

If both @strong{--recstart} and @strong{--recend} are given both will have to
match to find a split position.

If neither @strong{--recstart} nor @strong{--recend} are given @strong{--recend}
defaults to '\n'. To have no record separator use @strong{--recend ""}.

@strong{--files} is often used with @strong{--pipe}.

See also: @strong{--recstart}, @strong{--recend}, @strong{--fifo}, @strong{--cat}, @strong{--pipepart}.

@item @strong{--pipepart}
@anchor{@strong{--pipepart}}

Pipe parts of a physical file. @strong{--pipepart} works similar to
@strong{--pipe}, but is much faster. It has a few limitations:

@table @asis
@item *
@anchor{*}

The file must be a physical (seekable) file and must be given using @strong{-a} or @strong{::::}.

@item *
@anchor{* 1}

Record counting (@strong{-N}) and line counting (@strong{-L}/@strong{-l}) do not work.

@end table

@item @strong{--plain}
@anchor{@strong{--plain}}

Ignore any @strong{--profile}, $PARALLEL, and ~/.parallel/config to get full
control on the command line (used by GNU @strong{parallel} internally when
called with @strong{--sshlogin}).

@item @strong{--plus}
@anchor{@strong{--plus}}

Activate additional replacement strings: @{+/@} @{+.@} @{+..@} @{+...@} @{..@}
@{...@} @{/..@} @{/...@}. The idea being that '@{+foo@}' matches the opposite of
'@{foo@}' and @{@} = @{+/@}/@{/@} = @{.@}.@{+.@} = @{+/@}/@{/.@}.@{+.@} = @{..@}.@{+..@} =
@{+/@}/@{/..@}.@{+..@} = @{...@}.@{+...@} = @{+/@}/@{/...@}.@{+...@}

@item @strong{--progress}
@anchor{@strong{--progress}}

Show progress of computations. List the computers involved in the task
with number of CPU cores detected and the max number of jobs to
run. After that show progress for each computer: number of running
jobs, number of completed jobs, and percentage of all jobs done by
this computer. The percentage will only be available after all jobs
have been scheduled as GNU @strong{parallel} only read the next job when
ready to schedule it - this is to avoid wasting time and memory by
reading everything at startup.

By sending GNU @strong{parallel} SIGUSR2 you can toggle turning on/off
@strong{--progress} on a running GNU @strong{parallel} process.

See also @strong{--eta}.

@item @strong{--max-args}=@emph{max-args}
@anchor{@strong{--max-args}=@emph{max-args}}

@item @strong{-n} @emph{max-args}
@anchor{@strong{-n} @emph{max-args}}

Use at most @emph{max-args} arguments per command line.  Fewer than
@emph{max-args} arguments will be used if the size (see the @strong{-s} option)
is exceeded, unless the @strong{-x} option is given, in which case
GNU @strong{parallel} will exit.

@strong{-n 0} means read one argument, but insert 0 arguments on the command
line.

Implies @strong{-X} unless @strong{-m} is set.

@item @strong{--max-replace-args}=@emph{max-args}
@anchor{@strong{--max-replace-args}=@emph{max-args}}

@item @strong{-N} @emph{max-args}
@anchor{@strong{-N} @emph{max-args}}

Use at most @emph{max-args} arguments per command line. Like @strong{-n} but
also makes replacement strings @strong{@{1@}} .. @strong{@{}@emph{max-args}@strong{@}} that
represents argument 1 .. @emph{max-args}. If too few args the @strong{@{}@emph{n}@strong{@}} will
be empty.

@strong{-N 0} means read one argument, but insert 0 arguments on the command
line.

This will set the owner of the homedir to the user:

@verbatim
  tr ':' '\n' < /etc/passwd | parallel -N7 chown {1} {6}
@end verbatim

Implies @strong{-X} unless @strong{-m} or @strong{--pipe} is set.

When used with @strong{--pipe} @strong{-N} is the number of records to read. This
is somewhat slower than @strong{--block}.

@item @strong{--max-line-length-allowed}
@anchor{@strong{--max-line-length-allowed}}

Print the maximal number of characters allowed on the command line and
exit (used by GNU @strong{parallel} itself to determine the line length
on remote computers).

@item @strong{--number-of-cpus}
@anchor{@strong{--number-of-cpus}}

Print the number of physical CPUs and exit (used by GNU @strong{parallel}
itself to determine the number of physical CPUs on remote computers).

@item @strong{--number-of-cores}
@anchor{@strong{--number-of-cores}}

Print the number of CPU cores and exit (used by GNU @strong{parallel} itself
to determine the number of CPU cores on remote computers).

@item @strong{--no-keep-order}  (alpha testing)
@anchor{@strong{--no-keep-order}  (alpha testing)}

Overrides an earlier @strong{--keep-order} (e.g. if set in
@strong{~/.parallel/config}).

@item @strong{--no-notice}
@anchor{@strong{--no-notice}}

Do not display citation notice. A citation notice is printed on stderr
(standard error) only if stderr (standard error) is a terminal, the
user has not specified @strong{--no-notice}, and the user has not run
@strong{--bibtex} once.

@item @strong{--nice} @emph{niceness}
@anchor{@strong{--nice} @emph{niceness}}

Run the command at this niceness. For simple commands you can just add
@strong{nice} in front of the command. But if the command consists of more
sub commands (Like: ls|wc) then prepending @strong{nice} will not always
work. @strong{--nice} will make sure all sub commands are niced - even on
remote servers.

@item @strong{--interactive}
@anchor{@strong{--interactive}}

@item @strong{-p}
@anchor{@strong{-p}}

Prompt the user about whether to run each command line and read a line
from the terminal.  Only run the command line if the response starts
with 'y' or 'Y'.  Implies @strong{-t}.

@item @strong{--parens} @emph{parensstring}
@anchor{@strong{--parens} @emph{parensstring}}

Use to define start and end parenthesis for @strong{@{= perl expression =@}}. The
left and the right parenthesis can be multiple characters and are
assumed to be the same length. The default is @strong{@{==@}} giving
@strong{@{=} as the start parenthesis and @strong{=@}} as the end parenthesis.

Another useful setting is @strong{,,,,} which would make both parenthesis
@strong{,,}:

@verbatim
  parallel --parens ,,,, echo foo is ,,s/I/O/g,, ::: FII
@end verbatim

See also: @strong{--rpl} @strong{@{= perl expression =@}}

@item @strong{--profile} @emph{profilename}
@anchor{@strong{--profile} @emph{profilename}}

@item @strong{-J} @emph{profilename}
@anchor{@strong{-J} @emph{profilename}}

Use profile @emph{profilename} for options. This is useful if you want to
have multiple profiles. You could have one profile for running jobs in
parallel on the local computer and a different profile for running jobs
on remote computers. See the section PROFILE FILES for examples.

@emph{profilename} corresponds to the file ~/.parallel/@emph{profilename}.

You can give multiple profiles by repeating @strong{--profile}. If parts of
the profiles conflict, the later ones will be used.

Default: config

@item @strong{--quote}
@anchor{@strong{--quote}}

@item @strong{-q}
@anchor{@strong{-q}}

Quote @emph{command}.  This will quote the command line so special
characters are not interpreted by the shell. See the section
QUOTING. Most people will never need this.  Quoting is disabled by
default.

@item @strong{--no-run-if-empty}
@anchor{@strong{--no-run-if-empty}}

@item @strong{-r}
@anchor{@strong{-r}}

If the stdin (standard input) only contains whitespace, do not run the command.

If used with @strong{--pipe} this is slow.

@item @strong{--noswap}
@anchor{@strong{--noswap}}

Do not start new jobs on a given computer if there is both swap-in and
swap-out activity.

The swap activity is only sampled every 10 seconds as the sampling
takes 1 second to do.

Swap activity is computed as (swap-in)*(swap-out) which in practice is
a good value: swapping out is not a problem, swapping in is not a
problem, but both swapping in and out usually indicates a problem.

@item @strong{--record-env}
@anchor{@strong{--record-env}}

Record current environment variables in ~/.parallel/ignored_vars. This
is useful before using @strong{--env _}.

See also @strong{--env}.

@item @strong{--recstart} @emph{startstring}
@anchor{@strong{--recstart} @emph{startstring}}

@item @strong{--recend} @emph{endstring}
@anchor{@strong{--recend} @emph{endstring}}

If @strong{--recstart} is given @emph{startstring} will be used to split at record start.

If @strong{--recend} is given @emph{endstring} will be used to split at record end.

If both @strong{--recstart} and @strong{--recend} are given the combined string
@emph{endstring}@emph{startstring} will have to match to find a split
position. This is useful if either @emph{startstring} or @emph{endstring}
match in the middle of a record.

If neither @strong{--recstart} nor @strong{--recend} are given then @strong{--recend}
defaults to '\n'. To have no record separator use @strong{--recend ""}.

@strong{--recstart} and @strong{--recend} are used with @strong{--pipe}.

Use @strong{--regexp} to interpret @strong{--recstart} and @strong{--recend} as regular
expressions. This is slow, however.

@item @strong{--regexp}
@anchor{@strong{--regexp}}

Use @strong{--regexp} to interpret @strong{--recstart} and @strong{--recend} as regular
expressions. This is slow, however.

@item @strong{--remove-rec-sep}
@anchor{@strong{--remove-rec-sep}}

@item @strong{--removerecsep}
@anchor{@strong{--removerecsep}}

@item @strong{--rrs}
@anchor{@strong{--rrs}}

Remove the text matched by @strong{--recstart} and @strong{--recend} before piping
it to the command.

Only used with @strong{--pipe}.

@item @strong{--results} @emph{prefix}
@anchor{@strong{--results} @emph{prefix}}

@item @strong{--res} @emph{prefix}
@anchor{@strong{--res} @emph{prefix}}

Save the output into files. The files will be stored in a directory tree
rooted at @emph{prefix}.  Within this directory tree, each command will result
in two files: @emph{prefix}/<ARGS>/stdout and @emph{prefix}/<ARGS>/stderr, where
<ARGS> is a sequence of directories representing the header of the input
source (if using @strong{--header :}) or the number of the input source and
corresponding values.

E.g:

@verbatim
  parallel --header : --results foo echo {a} {b} \
    ::: a I II ::: b III IIII
@end verbatim

will generate the files:

@verbatim
  foo/a/I/b/III/stderr
  foo/a/I/b/III/stdout
  foo/a/I/b/IIII/stderr
  foo/a/I/b/IIII/stdout
  foo/a/II/b/III/stderr
  foo/a/II/b/III/stdout
  foo/a/II/b/IIII/stderr
  foo/a/II/b/IIII/stdout
@end verbatim

and

@verbatim
  parallel --results foo echo {1} {2} ::: I II ::: III IIII
@end verbatim

will generate the files:

@verbatim
  foo/1/I/2/III/stderr
  foo/1/I/2/III/stdout
  foo/1/I/2/IIII/stderr
  foo/1/I/2/IIII/stdout
  foo/1/II/2/III/stderr
  foo/1/II/2/III/stdout
  foo/1/II/2/IIII/stderr
  foo/1/II/2/IIII/stdout
@end verbatim

See also @strong{--files}, @strong{--header}, @strong{--joblog}.

@item @strong{--resume}
@anchor{@strong{--resume}}

Resumes from the last unfinished job. By reading @strong{--joblog} or the
@strong{--results} dir GNU @strong{parallel} will figure out the last unfinished
job and continue from there. As GNU @strong{parallel} only looks at the
sequence numbers in @strong{--joblog} then the input, the command, and
@strong{--joblog} all have to remain unchanged; otherwise GNU @strong{parallel}
may run wrong commands.

See also @strong{--joblog}, @strong{--results}, @strong{--resume-failed}.

@item @strong{--resume-failed}
@anchor{@strong{--resume-failed}}

Retry all failed and resume from the last unfinished job. By reading
@strong{--joblog} GNU @strong{parallel} will figure out the failed jobs and run
those again. After that it will resume last unfinished job and
continue from there. As GNU @strong{parallel} only looks at the sequence
numbers in @strong{--joblog} then the input, the command, and @strong{--joblog}
all have to remain unchanged; otherwise GNU @strong{parallel} may run wrong
commands.

See also @strong{--joblog}, @strong{--resume}.

@item @strong{--retries} @emph{n}
@anchor{@strong{--retries} @emph{n}}

If a job fails, retry it on another computer on which it has not
failed. Do this @emph{n} times. If there are fewer than @emph{n} computers in
@strong{--sshlogin} GNU @strong{parallel} will re-use all the computers. This is
useful if some jobs fail for no apparent reason (such as network
failure).

@item @strong{--return} @emph{filename} (alpha testing)
@anchor{@strong{--return} @emph{filename} (alpha testing)}

Transfer files from remote computers. @strong{--return} is used with
@strong{--sshlogin} when the arguments are files on the remote computers. When
processing is done the file @emph{filename} will be transferred
from the remote computer using @strong{rsync} and will be put relative to
the default login dir. E.g.

@verbatim
  echo foo/bar.txt | parallel --return {.}.out \
    --sshlogin server.example.com touch {.}.out
@end verbatim

This will transfer the file @emph{$HOME/foo/bar.out} from the computer
@emph{server.example.com} to the file @emph{foo/bar.out} after running
@strong{touch foo/bar.out} on @emph{server.example.com}.

@verbatim
  echo /tmp/foo/bar.txt | parallel --return {.}.out \
    --sshlogin server.example.com touch {.}.out
@end verbatim

This will transfer the file @emph{/tmp/foo/bar.out} from the computer
@emph{server.example.com} to the file @emph{/tmp/foo/bar.out} after running
@strong{touch /tmp/foo/bar.out} on @emph{server.example.com}.

Multiple files can be transferred by repeating the options multiple
times:

@verbatim
  echo /tmp/foo/bar.txt | parallel \
    --sshlogin server.example.com \
    --return {.}.out --return {.}.out2 touch {.}.out {.}.out2
@end verbatim

@strong{--return} is often used with @strong{--transfer} and @strong{--cleanup}.

@strong{--return} is ignored when used with @strong{--sshlogin :} or when not used
with @strong{--sshlogin}.

@item @strong{--round-robin}
@anchor{@strong{--round-robin}}

@item @strong{--round}
@anchor{@strong{--round}}

Normally @strong{--pipe} will give a single block to each instance of the
command. With @strong{--round-robin} all blocks will at random be written to
commands already running. This is useful if the command takes a long
time to initialize.

@strong{--keep-order} will not work with @strong{--round-robin} as it is
impossible to track which input block corresponds to which output.

@item @strong{--rpl} '@emph{tag} @emph{perl expression}'
@anchor{@strong{--rpl} '@emph{tag} @emph{perl expression}'}

Use @emph{tag} as a replacement string for @emph{perl expression}. This makes
it possible to define your own replacement strings. GNU @strong{parallel}'s
7 replacement strings are implemented as:

@verbatim
  --rpl '{} '
  --rpl '{#} 1 $_=$job->seq()'
  --rpl '{%} 1 $_=$job->slot()'
  --rpl '{/} s:.*/::'
  --rpl '{//} $Global::use{"File::Basename"} ||= eval "use File::Basename; 1;"; $_ = dirname($_);'
  --rpl '{/.} s:.*/::; s:\.[^/.]+$::;'
  --rpl '{.} s:\.[^/.]+$::'
@end verbatim

If the user defined replacement string starts with '@{' it can also be
used as a positional replacement string (like @strong{@{2.@}}).

It is recommended to only change $_ but you have full access to all
of GNU @strong{parallel}'s internal functions and data structures.

Here are a few examples:

@verbatim
  Remove 2 extensions (e.g. .tar.gz)
  --rpl '{..} s:\.[^/.]+$::;s:\.[^/.]+$::;'
  Keep only the extension
  --rpl '{ext} s:.*\.::'
  Is the job sequence even or odd?
  --rpl '{odd} $_=$job->seq()%2?"odd":"even"'
@end verbatim

See also: @strong{@{= perl expression =@}} @strong{--parens}

@item @strong{--max-chars}=@emph{max-chars}
@anchor{@strong{--max-chars}=@emph{max-chars}}

@item @strong{-s} @emph{max-chars}
@anchor{@strong{-s} @emph{max-chars}}

Use at most @emph{max-chars} characters per command line, including the
command and initial-arguments and the terminating nulls at the ends of
the argument strings.  The largest allowed value is system-dependent,
and is calculated as the argument length limit for exec, less the size
of your environment.  The default value is the maximum.

Implies @strong{-X} unless @strong{-m} is set.

@item @strong{--show-limits}
@anchor{@strong{--show-limits}}

Display the limits on the command-line length which are imposed by the
operating system and the @strong{-s} option.  Pipe the input from /dev/null
(and perhaps specify --no-run-if-empty) if you don't want GNU @strong{parallel}
to do anything.

@item @strong{--semaphore} (alpha testing)
@anchor{@strong{--semaphore} (alpha testing)}

Work as a counting semaphore. @strong{--semaphore} will cause GNU
@strong{parallel} to start @emph{command} in the background. When the number of
simultaneous jobs is reached, GNU @strong{parallel} will wait for one of
these to complete before starting another command.

@strong{--semaphore} implies @strong{--bg} unless @strong{--fg} is specified.

@strong{--semaphore} implies @strong{--semaphorename `tty`} unless
@strong{--semaphorename} is specified.

Used with @strong{--fg}, @strong{--wait}, and @strong{--semaphorename}.

The command @strong{sem} is an alias for @strong{parallel --semaphore}.

See also @strong{man sem}.

@item @strong{--semaphorename} @emph{name}
@anchor{@strong{--semaphorename} @emph{name}}

@item @strong{--id} @emph{name}
@anchor{@strong{--id} @emph{name}}

Use @strong{name} as the name of the semaphore. Default is the name of the
controlling tty (output from @strong{tty}).

The default normally works as expected when used interactively, but
when used in a script @emph{name} should be set. @emph{$$} or @emph{my_task_name}
are often a good value.

The semaphore is stored in ~/.parallel/semaphores/

Implies @strong{--semaphore}.

See also @strong{man sem}.

@item @strong{--semaphoretimeout} @emph{secs} (alpha testing)
@anchor{@strong{--semaphoretimeout} @emph{secs} (alpha testing)}

@item @strong{--st} @emph{secs} (alpha testing)
@anchor{@strong{--st} @emph{secs} (alpha testing)}

If @emph{secs} > 0: If the semaphore is not released within @emph{secs} seconds, take it anyway.

If @emph{secs} < 0: If the semaphore is not released within @emph{secs} seconds, exit.

Implies @strong{--semaphore}.

See also @strong{man sem}.

@item @strong{--seqreplace} @emph{replace-str}
@anchor{@strong{--seqreplace} @emph{replace-str}}

Use the replacement string @emph{replace-str} instead of @strong{@{#@}} for
job sequence number.

@item @strong{--shebang}
@anchor{@strong{--shebang}}

@item @strong{--hashbang}
@anchor{@strong{--hashbang}}

GNU @strong{parallel} can be called as a shebang (#!) command as the first
line of a script. The content of the file will be treated as
inputsource.

Like this:

@verbatim
  #!/usr/bin/parallel --shebang -r traceroute

  foss.org.my
  debian.org
  freenetproject.org
@end verbatim

@strong{--shebang} must be set as the first option.

On FreeBSD @strong{env} is needed:

@verbatim
  #!/usr/bin/env -S parallel --shebang -r traceroute

  foss.org.my
  debian.org
  freenetproject.org
@end verbatim

There are many limitations of shebang (#!) depending on your operating
system. See details on http://www.in-ulm.de/~mascheck/various/shebang/

@item @strong{--shebang-wrap}
@anchor{@strong{--shebang-wrap}}

GNU @strong{parallel} can parallelize scripts by wrapping the shebang
line. If the program can be run like this:

@verbatim
  cat arguments | parallel the_program
@end verbatim

then the script can be changed to:

@verbatim
  #!/usr/bin/parallel --shebang-wrap /the/original/parser --with-options
@end verbatim

E.g.

@verbatim
  #!/usr/bin/parallel --shebang-wrap /usr/bin/python
@end verbatim

If the program can be run like this:

@verbatim
  cat data | parallel --pipe the_program
@end verbatim

then the script can be changed to:

@verbatim
  #!/usr/bin/parallel --shebang-wrap --pipe /the/original/parser --with-options
@end verbatim

E.g.

@verbatim
  #!/usr/bin/parallel --shebang-wrap --pipe /usr/bin/perl -w
@end verbatim

@strong{--shebang-wrap} must be set as the first option.

@item @strong{--shellquote}
@anchor{@strong{--shellquote}}

Does not run the command but quotes it. Useful for making quoted
composed commands for GNU @strong{parallel}.

@item @strong{--skip-first-line}
@anchor{@strong{--skip-first-line}}

Do not use the first line of input (used by GNU @strong{parallel} itself
when called with @strong{--shebang}).

@item @strong{--sshdelay} @emph{secs}
@anchor{@strong{--sshdelay} @emph{secs}}

Delay starting next ssh by @emph{secs} seconds. GNU @strong{parallel} will pause
@emph{secs} seconds after starting each ssh. @emph{secs} can be less than 1
seconds.

@item @strong{-S} @emph{[@@hostgroups/][ncpu/]sshlogin[,[@@hostgroups/][ncpu/]sshlogin[,...]]} (alpha testing)
@anchor{@strong{-S} @emph{[@@hostgroups/][ncpu/]sshlogin[@comma{}[@@hostgroups/][ncpu/]sshlogin[@comma{}...]]} (alpha testing)}

@item @strong{--sshlogin} @emph{[@@hostgroups/][ncpu/]sshlogin[,[@@hostgroups/][ncpu/]sshlogin[,...]]} (alpha testing)
@anchor{@strong{--sshlogin} @emph{[@@hostgroups/][ncpu/]sshlogin[@comma{}[@@hostgroups/][ncpu/]sshlogin[@comma{}...]]} (alpha testing)}

Distribute jobs to remote computers. The jobs will be run on a list of
remote computers.

If @emph{hostgroups} is given, the @emph{sshlogin} will be added to that
hostgroup. Multiple hostgroups are separated by '+'. The @emph{sshlogin}
will always be added to a hostgroup named the same as @emph{sshlogin}.

If only the @emph{hostgroups} is given, only the sshlogins in those
hostgroups will be used.

GNU @strong{parallel} will determine the number of CPU cores on the remote
computers and run the number of jobs as specified by @strong{-j}.  If the
number @emph{ncpu} is given GNU @strong{parallel} will use this number for
number of CPU cores on the host. Normally @emph{ncpu} will not be needed.

An @emph{sshlogin} is of the form:

@verbatim
  [sshcommand [options]] [username@]hostname
@end verbatim

The sshlogin must not require a password.

The sshlogin ':' is special, it means 'no ssh' and will therefore run
on the local computer.

The sshlogin '..' is special, it read sshlogins from ~/.parallel/sshloginfile

The sshlogin '-' is special, too, it read sshlogins from stdin
(standard input).

To specify more sshlogins separate the sshlogins by comma or repeat
the options multiple times.

For examples: see @strong{--sshloginfile}.

The remote host must have GNU @strong{parallel} installed.

@strong{--sshlogin} is known to cause problems with @strong{-m} and @strong{-X}.

@strong{--sshlogin} is often used with @strong{--transfer}, @strong{--return},
@strong{--cleanup}, and @strong{--trc}.

@item @strong{--sshloginfile} @emph{filename}
@anchor{@strong{--sshloginfile} @emph{filename}}

@item @strong{--slf} @emph{filename}
@anchor{@strong{--slf} @emph{filename}}

File with sshlogins. The file consists of sshlogins on separate
lines. Empty lines and lines starting with '#' are ignored. Example:

@verbatim
  server.example.com
  username@server2.example.com
  8/my-8-core-server.example.com
  2/my_other_username@my-dualcore.example.net
  # This server has SSH running on port 2222
  ssh -p 2222 server.example.net
  4/ssh -p 2222 quadserver.example.net
  # Use a different ssh program
  myssh -p 2222 -l myusername hexacpu.example.net
  # Use a different ssh program with default number of cores
  //usr/local/bin/myssh -p 2222 -l myusername hexacpu
  # Use a different ssh program with 6 cores
  6//usr/local/bi