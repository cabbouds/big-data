Primer proyecto
========================================================
author: Carlos Jared Romero Reyes
date: 4 de marzo de 2015
font-import: http://fonts.googleapis.com/css?family=Risque
font-family: 'Risque'
css: proyecto_1.css

Scrapping
==========================================================================

Primero obtenemos las dirreciones donde se encuentran las tablas:
```{r, echo=FALSE}
library(rvest)
library(dplyr)
library(dplyr)
library(stringr)
```

```{r, eval=FALSE}
ufo_data <-html("http://www.nuforc.org/webreports/ndxevent.html")
archivos<-ufo_data%>%
  html_nodes("a") %>%
  html_attr("href")
archivos_2<-paste0("http://www.nuforc.org/webreports/",archivos[2:862])
años<-substr(archivos_2,38,41)
```

Scrapping
==========================================================================
 Luego para cada dirección obtenemos la tabla:

```{r, eval=FALSE}
direccion <- html(archivos_2[1])
tabla<-direccion%>%
  html_nodes(xpath='//*/table') %>%
  html_table()
a<-data.frame(año=años[1],tabla[[1]])

for(i in 2:length(archivos_2)){
  direccion <- html(archivos_2[i])
  tabla<-direccion%>%
    html_nodes(xpath='//*/table') %>%
    html_table()
  tabla<-data.frame(año=años[i],tabla[[1]])
  a<-rbind(a,tabla)}
```

Scrapping
==========================================================================
 Luego para cada dirección obtenemos la tabla:

```{r, eval=FALSE}
ufo_base<-data.frame(a)

write.table(ufo_base,
          "/home/jared/big-data/alumnos/jared275/UFO/ufo_base.txt",
          sep = "\t", col.names = TRUE)
```

Codigo de parallel y AWS
==========================================================================
Una vez hecho el script para scrapear las tablas, creo mis instancias y les descargo lo necesario para que puedan correr el script. Ya listas las maquinas ejecuto el siguiente comando que descarga las tablas y me las devuelve en mi maquina.

```
parallel --nonall Rscript scrap_ufo.R --slf instancias "./scrap_ufo.R"
```

¿Cuantas observaciones totales?
==========================================================================

Una vez obtenido el archivo, en linea de comandos ejecuto lo siguiente para comenzar a responder las preguntas:

```
jared@jared-Inspiron-3437:~/big-data/alumnos/jared275/UFO$ wc -l ufo_base.txt
96111 ufo_base.txt
```

¿Cuál es el top 5 de estados (más avistamientos)?
========================================================

```
jared@jared-Inspiron-3437:~/big-data/alumnos/jared275/UFO$ cut ufo_base.txt -d$'\t' -f4 |sort |uniq -c |sort -k1 -n| tail -7
   3181 "AZ"
   3808 "NY"
   4326 "TX"
   4968 "WA"
   5057 "FL"
   7726 ""
  11124 "CA"
```

¿Cuál es el top 5 de estados por año?
========================================================

En este comando tienes que específicar el año que te gustaría saber

```
jared@jared-Inspiron-3437:~/big-data/alumnos/jared275/UFO$ cut -d$'\t' -f1,2,4 ufo_base.txt | cut -d' ' -f4,7 | cut -d'/' -f3 | sort | uniq -c |sort -k 2 | awk  '{if ($2=="99") print $1,$2,$3;}' | sort -k1 -nr | head -6
400 99 CA
243 99
234 99 WA
146 99 TX
127 99 OH
109 99 IL
```

¿Cuál es el top 5 de estados por año?
========================================================

Dado que el año solo tiene 2 digitos, no se distingue por ejemplo 2000 y 1400,
por lo que lo hacemos en R, para ello solo me quedo con las columnas que me interesan.

```
cut -d$'\t' -f2,3,5 ufo_base.txt| cut -d' ' -f2,4,7 >base_ufos.csv
```

```{r}
base<-read.table("/home/jared/big-data/alumnos/jared275/UFO/base_ufos.csv",
                 header=F, sep="\t", stringsAsFactors=F)
names(base)<-c("año","fecha","estado")
base$fecha_ok<-as.Date(paste0(str_sub(base$fecha,1,-3),base$año),format='%m/%d/%Y')
```

¿Cuál es el top 5 de estados por año?
========================================================

```{r, echo=FALSE}
top_5<-base %>%
  group_by(año,estado)%>%
  summarise(cuenta=n())%>%
  arrange(desc(cuenta))

for (i in unique(base$año)[1]){
  print(head(subset(top_5, año==i),6))}
```

¿Cuál es la racha más larga de avistamientos en un estado?
========================================================

Creamos una función para contar la racha más larga en R:

```{r}
dias_seg<-function(base){
  a=0
  b=0
  pos<-"fecha"
  base<-append(base,0)
  for (i in 1:(length(base)-1)){
    if(base[i]==base[i+1]-1){a<-a+1}
    else{if (a>b){
        b<-a
        a<-0
        pos<-as.character(base[i])}}}
  return(c(b, pos))}
```


¿Cuál es la racha más larga de avistamientos en un estado?
========================================================

```{r, echo=FALSE}
base<-base[!is.na(base$fecha_ok),]
base<-base%>%
  arrange(estado, fecha_ok)
resultado<-tapply(base$fecha_ok,base$estado, dias_seg)
prueba<-Reduce('rbind',resultado)
rachas_edo<-data.frame(racha=as.numeric(prueba[,1]), fecha_ultim=prueba[,2],
                       estado=names(resultado))%>%
  arrange(racha)
tail(rachas_edo)
```


¿Cuál es la racha más larga de avistamientos en el país?
========================================================

```{r}
fechas_pais<-unique(base$fecha_ok)
fechas_pais<-fechas_pais[order(fechas_pais)]
dias_seg(fechas_pais)
```

¿Cuál es el mes con más avistamientos? ¿El día de la semana?
========================================================

```{r}
base$mes<-format(base$fecha_ok, "%b")
base$semana<-weekdays(base$fecha_ok)
```


¿Cuál es el mes con más avistamientos?
========================================================

```{r, echo=FALSE,fig.width=14}
library(ggplot2)
library(dplyr)
base%>%
  group_by(mes)%>%
  summarise(mes_cuenta=n())%>%
  ggplot(aes(x=reorder(mes,mes_cuenta), y=mes_cuenta))+
         geom_bar(stat="identity")
```


¿El día de la semana?
========================================================

```{r, echo=FALSE,fig.width=14}
base%>%
  group_by(semana)%>%
  summarise(dia_cuenta=n()) %>%
  ggplot(aes(x=reorder(semana,dia_cuenta), y=dia_cuenta))+
         geom_bar(stat="identity")
```

Linea del tiempo
========================================================

```{r, echo=FALSE,fig.width=18, fig.height=10}
tiempo_edo<-base%>%
  group_by(estado,año)%>%
  summarise(cuenta=n())

ggplot(tiempo_edo,aes(x=año,y=cuenta, size=cuenta, label=estado, group=estado))+
  geom_text(angle = 45)+theme(axis.text.x = element_text(angle = 90, hjust = 1))
```
